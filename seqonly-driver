#!/bin/bash

##################
# seqonly driver #
##################

### This script will 
### * Run the seqonly pipeline on data in current runfolder
### * Modify blueprint nextflow.config to project specific 
### * Generate project folder in shared/ctg-delivery/seqonly
###  -> Here it will store nextflow.config, nf-pipeline, samplesheet in ctg-log 
###  -> Write pipeline output 
### * nf-Pipeline writes qc to shared/ctg-qc/seqonly

# Set folders
# Project folder - where the pipeline will run, and all metadata, pipeline, config, samplesheet and temporary files are written and stored
ctgproj="/fs1/shared/ctg-projects/seqonly/"
# CTG pipeline - the raw nextflow pipeline with config.
ctgpipe="/projects/fs1/shared/ctg-pipelines/ctg-seqonly/"

# Initialize variables
runfolder=$(pwd)
sequencing=$(basename $runfolder)
demux="ON"
resume='n'

# usage message 
usage() {

    echo ""
    echo "Usage: seqonly-driver [ -i META_ID ] [ -s SAMPLESHEET ] [ -b BCL2FASTQ ARGUMENTS ] [ -r RESUME ] [ -d DEMUX-OFF ] [ -h HELP ] "  1>&2
    echo ""
    echo ""
    echo "Optional arguments: "
    echo "META-ID       -i : Set 'meta-id' for runfolder (e.g. 210330-seqonly). Default: Takes date of runfolder (before first _) and adds '-seqonly' as suffix "
    echo "SAMPLESHEET   -s : Set samplesheet used for run (Default: CTG_SampleSheet.csv) "
    echo "BCL2FASTQ arg -b : String with bcl2fastq argument. e.g. '--minimum-trimmed-read-length 20 --mask-short-adapter-reads 20' "
    echo "RESUME        -r : Set if to resume nf-pipeline"
    echo "DEMUX-OFF     -d : Set flag to skip bcl2fastq (then fastq must be in FQDIR) "
    echo "HELP          -h : print help message" 
   
}

exit_abnormal() {
    usage
    exit 1
}

# Read and control input arguments 
while getopts i:s:b:drh opt; do
    case $opt in
	i) id=$OPTARG
	    ;;
	s) sheet=$OPTARG
	    ;;
	b) b2farg=$OPTARG
	    ;;
	r) resume="y"
	    ;;
	d) demux="OFF"
	    ;;
	h) exit_abnormal
	    ;;
	\?) echo "> Error: Invalid option -$OPTARG" >&2
	    exit_abnormal ;;
    esac
done

## Check arguments
shift "$(( OPTIND -1 ))"

# Check meta-ID
if [ -z $id ]; then
    echo ""; echo "> WARNING! No meta-ID specified"
    metaid=$(echo $sequencing | cut -f1 -d"_")
    id="${metaid}-seqonly"
    echo "- Using: '${id}'"
fi

# Check if meta-ID already exist
if [ "$resume" == "n" ] && [ -d $ctgproj/$id ]; then
    # Prompt user to approve overwriting current seqonly project-folder
    read -p "> WARNING: $id has been used before - $ctgproj/$id already exists.

 Do you want to overwrite this folder? (Delete current content?) 

(y/n)  ... " prompt
    if [[ $prompt != "y" ]]
    then 
	echo "> Exiting: Please provide new [ -i metaID ] !"
	exit_abnormal
    else
	rm -r $ctgproj/$id/*
    fi
fi

# Check samplesheet
if [ -z $sheet ]; then
    echo ""; echo "> WARNING! No samplesheet specified"
    sheet="CTG_SampleSheet.seqonly.csv"
    echo "- Using '${sheet}'"
    if [ ! -f $sheet ]; then
	echo "> Error: CTG_SampleSheet.seqonly.csv does not exist (in current dir)"
	echo "- Please specify correct samplesheet, or create a CTG_SampleSheet.seqonly.csv in current runfolder"
	exit_abnormal
    fi
fi

# Check bcl2fastq arg
if [ -z $b2farg ]; then
    b2farg=''
fi

##############
# Print info #
##############
echo ""
echo "> The following arguments are entered:"
echo "ID               : $id"
echo "Sheet            : $sheet"; 
echo "Bcl2fastq arg    : $b2farg";
if [ $demux == "ON" ]; then
    echo "Demux            : YES "
else
    echo "Demux            : NO "
fi
if [ $resume == "y" ]; then
    echo "Resume           : YES "
else
    echo "Resume           : NO "
fi

echo ""
echo "> Running on runfolder: "
echo "Runfolder       : $runfolder "
echo ""

echo ""
echo "> Project log folder: "
echo "Logfolder       : $ctgproj/$id"
echo ""

echo ""
echo "> Output folder : "
echo "Output          : $ctgproj/$id"
echo ""

# Prompt user to approve running in current directory and input
read -p "> WARNING: Can only be run from within runfolder! 

Are you in runfolder in which you want run? 
And are input described above correct ?  

(y/n)  ... " prompt
if [[ $prompt != "y" ]]
then 
    echo "> Exiting: Go to runfolder!"
    exit_abnormal
fi

################
# Set up files #
################

# Creating project dir for logging pipeline
projdir="$ctgproj/$id/"
mkdir -p $projdir

# Copy nextflow script and config to project folder
nf_pipe="$ctgpipe/pipe-seqonly-qc.nf"
nf_config="$ctgpipe/nextflow.config"
cp $nf_pipe $projdir
cp $nf_config $projdir
# Copy samplesheet to project folder (ctg-projects..)
cp $sheet $projdir

# Go to project folder 
cd $projdir

# Edit config file
proj_conf=$projdir/nextflow.config
sed "s/xmetaidx/$id/g" $proj_conf > tmp.txt; mv tmp.txt $proj_conf
sed "s|xsequencingx|$sequencing|g" $proj_conf > tmp.txt; mv tmp.txt $proj_conf
basename_sheet=$(basename $sheet)
sed "s|xsamplesheetx|$basename_sheet|g" $proj_conf > tmp.txt; mv tmp.txt $proj_conf
sed "s/xbcl2fastqargx/$b2farg/g" $proj_conf > tmp.txt; mv tmp.txt $proj_conf
if [ $demux == "ON" ];then
    sed "s/xdemuxx/y/g" $proj_conf > tmp.txt; mv tmp.txt $proj_conf
else
    sed "s/xdemuxx/n/g" $proj_conf > tmp.txt; mv tmp.txt $proj_conf
fi

# Copy edited config to runfolder
#cp $proj_conf $runfolder


#####################
# Start nf-pipeline #
#####################

if [ $resume == "y" ]; then
    nohup nextflow run $nf_pipe -resume > log.nf.seqonly.$id &
else
    nohup nextflow run $nf_pipe > log.nf.seqonly.$id &
fi


echo ""; echo ""
echo "#################################"
echo "# seqonly pipeline submitted #"
echo "#################################"
echo ""; echo "";





